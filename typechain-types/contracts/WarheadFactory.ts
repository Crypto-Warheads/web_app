/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WarheadFactory {
  export type CoordStruct = { lat: BigNumberish; long: BigNumberish };

  export type CoordStructOutput = [lat: bigint, long: bigint] & {
    lat: bigint;
    long: bigint;
  };

  export type WarheadObjectStruct = {
    dropper: AddressLike;
    isLaunched: boolean;
    target: WarheadFactory.CoordStruct;
    impactTime: BigNumberish;
    claimer: AddressLike;
    isClaimed: boolean;
    claimedAt: BigNumberish;
    targetReceiver: AddressLike;
  };

  export type WarheadObjectStructOutput = [
    dropper: string,
    isLaunched: boolean,
    target: WarheadFactory.CoordStructOutput,
    impactTime: bigint,
    claimer: string,
    isClaimed: boolean,
    claimedAt: bigint,
    targetReceiver: string
  ] & {
    dropper: string;
    isLaunched: boolean;
    target: WarheadFactory.CoordStructOutput;
    impactTime: bigint;
    claimer: string;
    isClaimed: boolean;
    claimedAt: bigint;
    targetReceiver: string;
  };
}

export interface WarheadFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "createWarhead"
      | "dropWarhead"
      | "fetchWarheadInfo"
      | "isTrustedForwarder"
      | "onERC721Received"
      | "owner"
      | "trustedForwarder"
      | "versionRecipient"
      | "warheadNft"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "WarheadClaimed"
      | "WarheadCreated"
      | "WarheadCreatedWithReceiver"
      | "WarheadDropped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [WarheadFactory.CoordStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWarhead",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dropWarhead",
    values: [BigNumberish, WarheadFactory.CoordStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchWarheadInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "warheadNft",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWarhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropWarhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchWarheadInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warheadNft", data: BytesLike): Result;
}

export namespace WarheadClaimedEvent {
  export type InputTuple = [
    warheadId: BigNumberish,
    claimer: AddressLike,
    claimedAt: BigNumberish
  ];
  export type OutputTuple = [
    warheadId: bigint,
    claimer: string,
    claimedAt: bigint
  ];
  export interface OutputObject {
    warheadId: bigint;
    claimer: string;
    claimedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WarheadCreatedEvent {
  export type InputTuple = [warheadId: BigNumberish, dropper: AddressLike];
  export type OutputTuple = [warheadId: bigint, dropper: string];
  export interface OutputObject {
    warheadId: bigint;
    dropper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WarheadCreatedWithReceiverEvent {
  export type InputTuple = [
    warheadId: BigNumberish,
    dropper: AddressLike,
    targetReceiver: AddressLike
  ];
  export type OutputTuple = [
    warheadId: bigint,
    dropper: string,
    targetReceiver: string
  ];
  export interface OutputObject {
    warheadId: bigint;
    dropper: string;
    targetReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WarheadDroppedEvent {
  export type InputTuple = [
    warheadId: BigNumberish,
    target: WarheadFactory.CoordStruct,
    impactTime: BigNumberish
  ];
  export type OutputTuple = [
    warheadId: bigint,
    target: WarheadFactory.CoordStructOutput,
    impactTime: bigint
  ];
  export interface OutputObject {
    warheadId: bigint;
    target: WarheadFactory.CoordStructOutput;
    impactTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WarheadFactory extends BaseContract {
  connect(runner?: ContractRunner | null): WarheadFactory;
  waitForDeployment(): Promise<this>;

  interface: WarheadFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [location: WarheadFactory.CoordStruct, warheadId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createWarhead: TypedContractMethod<
    [targetReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  dropWarhead: TypedContractMethod<
    [
      warheadId: BigNumberish,
      coord: WarheadFactory.CoordStruct,
      impactTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fetchWarheadInfo: TypedContractMethod<
    [warheadId: BigNumberish],
    [WarheadFactory.WarheadObjectStructOutput],
    "view"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  trustedForwarder: TypedContractMethod<[], [string], "view">;

  versionRecipient: TypedContractMethod<[], [string], "view">;

  warheadNft: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [location: WarheadFactory.CoordStruct, warheadId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createWarhead"
  ): TypedContractMethod<[targetReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dropWarhead"
  ): TypedContractMethod<
    [
      warheadId: BigNumberish,
      coord: WarheadFactory.CoordStruct,
      impactTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetchWarheadInfo"
  ): TypedContractMethod<
    [warheadId: BigNumberish],
    [WarheadFactory.WarheadObjectStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "trustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "versionRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "warheadNft"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "WarheadClaimed"
  ): TypedContractEvent<
    WarheadClaimedEvent.InputTuple,
    WarheadClaimedEvent.OutputTuple,
    WarheadClaimedEvent.OutputObject
  >;
  getEvent(
    key: "WarheadCreated"
  ): TypedContractEvent<
    WarheadCreatedEvent.InputTuple,
    WarheadCreatedEvent.OutputTuple,
    WarheadCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WarheadCreatedWithReceiver"
  ): TypedContractEvent<
    WarheadCreatedWithReceiverEvent.InputTuple,
    WarheadCreatedWithReceiverEvent.OutputTuple,
    WarheadCreatedWithReceiverEvent.OutputObject
  >;
  getEvent(
    key: "WarheadDropped"
  ): TypedContractEvent<
    WarheadDroppedEvent.InputTuple,
    WarheadDroppedEvent.OutputTuple,
    WarheadDroppedEvent.OutputObject
  >;

  filters: {
    "WarheadClaimed(uint256,address,uint256)": TypedContractEvent<
      WarheadClaimedEvent.InputTuple,
      WarheadClaimedEvent.OutputTuple,
      WarheadClaimedEvent.OutputObject
    >;
    WarheadClaimed: TypedContractEvent<
      WarheadClaimedEvent.InputTuple,
      WarheadClaimedEvent.OutputTuple,
      WarheadClaimedEvent.OutputObject
    >;

    "WarheadCreated(uint256,address)": TypedContractEvent<
      WarheadCreatedEvent.InputTuple,
      WarheadCreatedEvent.OutputTuple,
      WarheadCreatedEvent.OutputObject
    >;
    WarheadCreated: TypedContractEvent<
      WarheadCreatedEvent.InputTuple,
      WarheadCreatedEvent.OutputTuple,
      WarheadCreatedEvent.OutputObject
    >;

    "WarheadCreatedWithReceiver(uint256,address,address)": TypedContractEvent<
      WarheadCreatedWithReceiverEvent.InputTuple,
      WarheadCreatedWithReceiverEvent.OutputTuple,
      WarheadCreatedWithReceiverEvent.OutputObject
    >;
    WarheadCreatedWithReceiver: TypedContractEvent<
      WarheadCreatedWithReceiverEvent.InputTuple,
      WarheadCreatedWithReceiverEvent.OutputTuple,
      WarheadCreatedWithReceiverEvent.OutputObject
    >;

    "WarheadDropped(uint256,tuple,uint256)": TypedContractEvent<
      WarheadDroppedEvent.InputTuple,
      WarheadDroppedEvent.OutputTuple,
      WarheadDroppedEvent.OutputObject
    >;
    WarheadDropped: TypedContractEvent<
      WarheadDroppedEvent.InputTuple,
      WarheadDroppedEvent.OutputTuple,
      WarheadDroppedEvent.OutputObject
    >;
  };
}
