/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ERC6551Account,
  ERC6551AccountInterface,
} from "../../contracts/ERC6551Account";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "TransactionExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeCall",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061136a806100206000396000f3fe6080604052600436106100745760003560e01c80638da5cb5b1161004e5780638da5cb5b146101375780639e5d4c4914610162578063affed0e014610192578063fc0c546a146101bd5761007b565b806301ffc9a714610080578063150b7a02146100bd5780631626ba7e146100fa5761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610991565b6101ea565b6040516100b491906109d9565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610aed565b6102bc565b6040516100f19190610b84565b60405180910390f35b34801561010657600080fd5b50610121600480360381019061011c9190610d16565b6102d1565b60405161012e9190610b84565b60405180910390f35b34801561014357600080fd5b5061014c61030a565b6040516101599190610d81565b60405180910390f35b61017c60048036038101906101779190610d9c565b61041b565b6040516101899190610e8f565b60405180910390f35b34801561019e57600080fd5b506101a7610583565b6040516101b49190610ec0565b60405180910390f35b3480156101c957600080fd5b506101d2610589565b6040516101e193929190610edb565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102b557507f400a0398000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b6000806102e66102df61030a565b85856105a1565b905080156102fe57631626ba7e60e01b915050610304565b60009150505b92915050565b6000806000803073ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f9190610f3c565b9250925092504683146103985760009350505050610418565b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b81526004016103d19190610ec0565b602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190610f8f565b93505050505b90565b606061042561030a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048990611019565b60405180910390fd5b60008081546104a090611068565b91905081905550838573ffffffffffffffffffffffffffffffffffffffff167f47d99ad340f52da66535aff7e10da1ceb85a32bcbd9fa1c42314d194545e14d285856040516104f09291906110dd565b60405180910390a360008573ffffffffffffffffffffffffffffffffffffffff16858585604051610522929190611131565b60006040518083038185875af1925050503d806000811461055f576040519150601f19603f3d011682016040523d82523d6000602084013e610564565b606091505b5080935081925050508061057a57815160208301fd5b50949350505050565b60005481565b6000806000610596610631565b925092509250909192565b60008060006105b085856106b1565b5091509150600060038111156105c9576105c861114a565b5b8160038111156105dc576105db61114a565b5b14801561061457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80610626575061062586868661070d565b5b925050509392505050565b600080600080606067ffffffffffffffff81111561065257610651610beb565b5b6040519080825280601f01601f1916602001820160405280156106845781602001600182028036833780820191505090505b5090506060604d60208301303c808060200190518101906106a591906111b7565b93509350935050909192565b600080600060418451036106f65760008060006020870151925060408701519150606087015160001a90506106e888828585610831565b955095509550505050610706565b60006002855160001b9250925092505b9250925092565b60008060008573ffffffffffffffffffffffffffffffffffffffff16858560405160240161073c929190611219565b604051602081830303815290604052631626ba7e60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161078e919061127a565b600060405180830381855afa9150503d80600081146107c9576040519150601f19603f3d011682016040523d82523d6000602084013e6107ce565b606091505b50915091508180156107e257506020815110155b80156108265750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061082491906112a6565b145b925050509392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561087157600060038592509250925061091b565b60006001888888886040516000815260200160405260405161089694939291906112ef565b6020604051602081039080840390855afa1580156108b8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361090c57600060016000801b9350935093505061091b565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61096e81610939565b811461097957600080fd5b50565b60008135905061098b81610965565b92915050565b6000602082840312156109a7576109a661092f565b5b60006109b58482850161097c565b91505092915050565b60008115159050919050565b6109d3816109be565b82525050565b60006020820190506109ee60008301846109ca565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1f826109f4565b9050919050565b610a2f81610a14565b8114610a3a57600080fd5b50565b600081359050610a4c81610a26565b92915050565b6000819050919050565b610a6581610a52565b8114610a7057600080fd5b50565b600081359050610a8281610a5c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aad57610aac610a88565b5b8235905067ffffffffffffffff811115610aca57610ac9610a8d565b5b602083019150836001820283011115610ae657610ae5610a92565b5b9250929050565b600080600080600060808688031215610b0957610b0861092f565b5b6000610b1788828901610a3d565b9550506020610b2888828901610a3d565b9450506040610b3988828901610a73565b935050606086013567ffffffffffffffff811115610b5a57610b59610934565b5b610b6688828901610a97565b92509250509295509295909350565b610b7e81610939565b82525050565b6000602082019050610b996000830184610b75565b92915050565b6000819050919050565b610bb281610b9f565b8114610bbd57600080fd5b50565b600081359050610bcf81610ba9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c2382610bda565b810181811067ffffffffffffffff82111715610c4257610c41610beb565b5b80604052505050565b6000610c55610925565b9050610c618282610c1a565b919050565b600067ffffffffffffffff821115610c8157610c80610beb565b5b610c8a82610bda565b9050602081019050919050565b82818337600083830152505050565b6000610cb9610cb484610c66565b610c4b565b905082815260208101848484011115610cd557610cd4610bd5565b5b610ce0848285610c97565b509392505050565b600082601f830112610cfd57610cfc610a88565b5b8135610d0d848260208601610ca6565b91505092915050565b60008060408385031215610d2d57610d2c61092f565b5b6000610d3b85828601610bc0565b925050602083013567ffffffffffffffff811115610d5c57610d5b610934565b5b610d6885828601610ce8565b9150509250929050565b610d7b81610a14565b82525050565b6000602082019050610d966000830184610d72565b92915050565b60008060008060608587031215610db657610db561092f565b5b6000610dc487828801610a3d565b9450506020610dd587828801610a73565b935050604085013567ffffffffffffffff811115610df657610df5610934565b5b610e0287828801610a97565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e4a578082015181840152602081019050610e2f565b60008484015250505050565b6000610e6182610e10565b610e6b8185610e1b565b9350610e7b818560208601610e2c565b610e8481610bda565b840191505092915050565b60006020820190508181036000830152610ea98184610e56565b905092915050565b610eba81610a52565b82525050565b6000602082019050610ed56000830184610eb1565b92915050565b6000606082019050610ef06000830186610eb1565b610efd6020830185610d72565b610f0a6040830184610eb1565b949350505050565b600081519050610f2181610a5c565b92915050565b600081519050610f3681610a26565b92915050565b600080600060608486031215610f5557610f5461092f565b5b6000610f6386828701610f12565b9350506020610f7486828701610f27565b9250506040610f8586828701610f12565b9150509250925092565b600060208284031215610fa557610fa461092f565b5b6000610fb384828501610f27565b91505092915050565b600082825260208201905092915050565b7f4e6f7420746f6b656e206f776e65720000000000000000000000000000000000600082015250565b6000611003600f83610fbc565b915061100e82610fcd565b602082019050919050565b6000602082019050818103600083015261103281610ff6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107382610a52565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110a5576110a4611039565b5b600182019050919050565b60006110bc8385610e1b565b93506110c9838584610c97565b6110d283610bda565b840190509392505050565b600060208201905081810360008301526110f88184866110b0565b90509392505050565b600081905092915050565b60006111188385611101565b9350611125838584610c97565b82840190509392505050565b600061113e82848661110c565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611184826109f4565b9050919050565b61119481611179565b811461119f57600080fd5b50565b6000815190506111b18161118b565b92915050565b6000806000606084860312156111d0576111cf61092f565b5b60006111de86828701610f12565b93505060206111ef868287016111a2565b925050604061120086828701610f12565b9150509250925092565b61121381610b9f565b82525050565b600060408201905061122e600083018561120a565b81810360208301526112408184610e56565b90509392505050565b600061125482610e10565b61125e8185611101565b935061126e818560208601610e2c565b80840191505092915050565b60006112868284611249565b915081905092915050565b6000815190506112a081610ba9565b92915050565b6000602082840312156112bc576112bb61092f565b5b60006112ca84828501611291565b91505092915050565b600060ff82169050919050565b6112e9816112d3565b82525050565b6000608082019050611304600083018761120a565b61131160208301866112e0565b61131e604083018561120a565b61132b606083018461120a565b9594505050505056fea2646970667358221220a21caee83aea3d2575feb594d594ba506ea3e571633a24de1e8f37d95da700a564736f6c63430008180033";

type ERC6551AccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC6551AccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC6551Account__factory extends ContractFactory {
  constructor(...args: ERC6551AccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC6551Account & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC6551Account__factory {
    return super.connect(runner) as ERC6551Account__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC6551AccountInterface {
    return new Interface(_abi) as ERC6551AccountInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC6551Account {
    return new Contract(address, _abi, runner) as unknown as ERC6551Account;
  }
}
